<?php
session_start();
require_once '../src/models/User.php'; // Include User model

// Check authentication
if (!isset($_COOKIE['authToken']) || !isset($_COOKIE['role'])) {
    header('Location: login.php');
    exit();
}

$user_role = $_COOKIE['role'];
$user_id = $_COOKIE['user_id'];

// Fetch username from database using user_id
$user = new User();
$userData = $user->readById($user_id);
$username = $userData['username'] ?? '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'; // Default to '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' if username not found
?>
<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡πá‡∏Å</title>
    <link rel="stylesheet" href="./css/globals.css">
    <link rel="stylesheet" href="./css/navbars.css">
    <link rel="stylesheet" href="./css/admin.css">
</head>
<body>
  <!-- Navbar -->
    <nav class="navbar">
        <div class="navbar-title"><a href="dashboard.php">üìã ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô</a></div>

        <div class="navbar-center">
            ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: <?php echo htmlspecialchars($username); ?>
        </div>

        <ul>
            <?php if ($user_role === 'admin'): ?>
                <li><a href="admin.php">üîß ‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•</a></li>
			    <li><a href="view.php">üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</a></li>
            <?php endif; ?>
            <li><a href="settings.php">‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</a></li>
            <li><a href="logout.php">üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</a></li>
        </ul>
    </nav>

    <h1>üë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h1>
    
    <div id="user-management">
        <h2>üìã ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h2>
        <table id="userTable">
            <thead>
                <tr>
                    <th class="user-code">‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</th>
                    <th class="user-name">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</th>
                    <th>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
                    <th>‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó</th>
                    <th>‡πÅ‡∏ú‡∏ô‡∏Å</th>
                    <th class="user-address">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</th>
                    <th>‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</th>
                    <th class="user-action">‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥</th>
                </tr>
            </thead>
            <tbody>
                <!-- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ -->
            </tbody>
        </table>
    </div>

<div id="tag-management">
    <h2>üìù ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</h2>

    <!-- Title Management Section -->
    <div id="title-management">
        <h3 class="heading-title">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠</h3>
        <div class="tag-column">
            <ul id="title-list-left-side"></ul>
        </div>
        <div class="tag-column">
            <ul id="title-list-right-side"></ul>
        </div>
    </div>

    <!-- Input Group for Adding New Title -->
    <div class="input-group">
        <input type="text" id="new-title" placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà" aria-label="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà">
        <button onclick="addTitle()" aria-label="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà</button>
    </div>

    <!-- Priority Management Section -->
    <div class="priority-management">
        <h3 class="heading-priority">‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç</h3>
        <ul id="priority-list"></ul>
        <div class="input-group">
            <input type="text" id="new-priority" placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏´‡∏°‡πà" aria-label="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏´‡∏°‡πà">
            <button onclick="addPriority()" aria-label="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏´‡∏°‡πà">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏´‡∏°‡πà</button>
        </div>
    </div>

    <!-- Status Management Section -->
    <div class="status-management">
        <h3 class="heading-status">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</h3>
        <ul id="status-list"></ul>
        <div class="input-group">
            <input type="text" id="new-status" placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà" aria-label="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà">
            <button onclick="addStatus()" aria-label="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà</button>
        </div>
    </div>
</div>



    <script>
        // Current user ID and role from cookies
        const currentUserId = <?php echo json_encode($current_user_id); ?>;
        const currentUserRole = <?php echo json_encode($user_role); ?>;

        // Remove user by user_id
        function removeUser(user_id) {
            if (confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ?")) {
                fetch('utils/remove_user.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: `user_id=${user_id}`
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
                        fetchUsers(); // Refresh the user list after deletion
                    } else {
                        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
                });
            }
        }

        // Fetch all users
        function fetchUsers() {
            fetch('utils/fetch_all_users.php') 
                .then(response => response.json())
                .then(data => {
                    const userTableBody = document.querySelector('#userTable tbody');
                    userTableBody.innerHTML = '';

                    if (data.success) {
                        data.data.forEach(user => {
                            const isCurrentUser = user.user_id == currentUserId; // Check if this is the current user

                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td data-label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ">${user.user_id}</td>
                                <td data-label="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ">${user.username}</td>
                                <td data-label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•">${user.email}</td>
                                <td data-label="‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó">
                                    <select ${isCurrentUser ? 'disabled' : ''} onchange="handleRoleChange(${user.user_id}, this.value)" class="role-select" aria-label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó">
                                        <option value="user" ${user.role === 'user' ? 'selected' : ''}>‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</option>
                                        <option value="admin" ${user.role === 'admin' ? 'selected' : ''}>‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</option>
                                    </select>
                                    <button id="save-button-${user.user_id}" class="btn-save" style="display:none;" onclick="saveRoleChange(${user.user_id})" aria-label="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                                </td>
                                <td data-label="‡πÅ‡∏ú‡∏ô‡∏Å">${user.department}</td>
                                <td data-label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà">${user.address}</td>
                                <td data-label="‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå">${user.phone}</td>
                                <td data-label="‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥">
                                    <button ${isCurrentUser ? 'disabled' : ''} onclick="removeUser(${user.user_id})" class="btn-delete" aria-label="‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ">
                                        ‡∏•‡∏ö
                                    </button>
                                </td>
                            `;
                            userTableBody.appendChild(row);
                        });
                    }
                });
        }

        // Handle role change, show save button
        function handleRoleChange(userId, newRole) {
            const saveButton = document.getElementById(`save-button-${userId}`);
            saveButton.style.display = 'inline-flex'; // Show the save button
        }

        // Save the new role when the save button is clicked
        function saveRoleChange(userId) {
            const selectElement = document.querySelector(`#userTable select[onchange="handleRoleChange(${userId}, this.value)"]`);
            const newRole = selectElement.value;

            fetch('utils/update_user_role.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: `user_id=${userId}&role=${newRole}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                    fetchUsers(); // Refresh user list after update
                } else {
                    alert('Error ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
            });
        }

        // Fetch priorities, statuses, and titles
        function fetchTags() {
            fetch('utils/manage_tag.php')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Populate Priority List
                        const priorityList = document.getElementById('priority-list');
                        priorityList.innerHTML = '';
                        data.priorities.forEach(priority => {
                            const li = document.createElement('li');
                            li.innerHTML = `
                                <span>${priority.name}</span>
                                <div class="button-group">
                                    <button onclick="editPriority(${priority.id}, '${priority.name}')" class="btn-edit" aria-label="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç">
                                        ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                                    </button>
                                    <button onclick="deletePriority(${priority.id})" class="btn-delete" aria-label="‡∏•‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç">
                                        ‡∏•‡∏ö
                                    </button>
                                </div>
                            `;
                            priorityList.appendChild(li);
                        });

                        // Populate Status List
                        const statusList = document.getElementById('status-list');
                        statusList.innerHTML = '';
                        data.statuses.forEach(status => {
                            const li = document.createElement('li');
                            li.innerHTML = `
                                <span>${status.name}</span>
                                <div class="button-group">
                                    <button onclick="editStatus(${status.id}, '${status.name}')" class="btn-edit" aria-label="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞">
                                        ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                                    </button>
                                    <button onclick="deleteStatus(${status.id})" class="btn-delete" aria-label="‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞">
                                        ‡∏•‡∏ö
                                    </button>
                                </div>
                            `;
                            statusList.appendChild(li);
                        });

                        // Populate Title Lists (Left and Right)
                        const titleListLeft = document.getElementById('title-list-left-side');
                        const titleListRight = document.getElementById('title-list-right-side');
                        titleListLeft.innerHTML = '';
                        titleListRight.innerHTML = '';

                        data.titles.forEach((title, index) => {
                            const li = document.createElement('li');
                            li.innerHTML = `
                                <span>${title.name}</span>
                                <div class="button-group">
                                    <button onclick="editTitle(${title.id}, '${title.name}')" class="btn-edit" aria-label="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠">
                                        ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                                    </button>
                                    <button onclick="deleteTitle(${title.id})" class="btn-delete" aria-label="‡∏•‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠">
                                        ‡∏•‡∏ö
                                    </button>
                                </div>
                            `;
                            // Alternate titles between left and right lists
                            if (index % 2 === 0) {
                                titleListLeft.appendChild(li);
                            } else {
                                titleListRight.appendChild(li);
                            }
                        });
                    }
                })
                .catch(error => {
                    console.error('Error fetching tags:', error);
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πá‡∏Å');
                });
        }

        // Add Title
        function addTitle() {
            const titleName = document.getElementById('new-title').value.trim();
            if (titleName === "") {
                alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà");
                return;
            }
            fetch('utils/manage_tag.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: `action=add_title&name=${encodeURIComponent(titleName)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    fetchTags();
                    document.getElementById('new-title').value = '';
                } else {
                    alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + data.message);
                }
            })
            .catch(error => {
                console.error('Error adding title:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠');
            });
        }

        // Add Priority
        function addPriority() {
            const priorityName = document.getElementById('new-priority').value.trim();
            if (priorityName === "") {
                alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏´‡∏°‡πà");
                return;
            }
            fetch('utils/manage_tag.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: `action=add_priority&name=${encodeURIComponent(priorityName)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    fetchTags();
                    document.getElementById('new-priority').value = '';
                } else {
                    alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + data.message);
                }
            })
            .catch(error => {
                console.error('Error adding priority:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç');
            });
        }

        // Add Status
        function addStatus() {
            const statusName = document.getElementById('new-status').value.trim();
            if (statusName === "") {
                alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà");
                return;
            }
            fetch('utils/manage_tag.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: `action=add_status&name=${encodeURIComponent(statusName)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    fetchTags();
                    document.getElementById('new-status').value = '';
                } else {
                    alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + data.message);
                }
            })
            .catch(error => {
                console.error('Error adding status:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
            });
        }

        // Edit Title
        function editTitle(id, name) {
            const newName = prompt("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà:", name);
            if (newName && newName.trim() !== "") {
                fetch('utils/manage_tag.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: `edit_action=edit_title&id=${id}&name=${encodeURIComponent(newName.trim())}`
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        fetchTags();
                    } else {
                        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error editing title:', error);
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠');
                });
            } else {
                alert("‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
            }
        }

        // Edit Priority
        function editPriority(id, name) {
            const newName = prompt("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏´‡∏°‡πà:", name);
            if (newName && newName.trim() !== "") {
                fetch('utils/manage_tag.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: `edit_action=edit_priority&id=${id}&name=${encodeURIComponent(newName.trim())}`
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        fetchTags();
                    } else {
                        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error editing priority:', error);
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç');
                });
            } else {
                alert("‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
            }
        }

        // Edit Status
        function editStatus(id, name) {
            const newName = prompt("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà:", name);
            if (newName && newName.trim() !== "") {
                fetch('utils/manage_tag.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: `edit_action=edit_status&id=${id}&name=${encodeURIComponent(newName.trim())}`
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        fetchTags();
                    } else {
                        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error editing status:', error);
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
                });
            } else {
                alert("‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
            }
        }

        // Delete Title
        function deleteTitle(id) {
            if (confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ?")) {
                fetch('utils/manage_tag.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: `delete_action=delete_title&id=${id}`
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        fetchTags();
                    } else {
                        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error deleting title:', error);
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠');
                });
            }
        }

        // Delete Priority
        function deletePriority(id) {
            if (confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ô‡∏µ‡πâ?")) {
                fetch('utils/manage_tag.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: `delete_action=delete_priority&id=${id}`
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        fetchTags();
                    } else {
                        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error deleting priority:', error);
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç');
                });
            }
        }

        // Delete Status
        function deleteStatus(id) {
            if (confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏µ‡πâ?")) {
                fetch('utils/manage_tag.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: `delete_action=delete_status&id=${id}`
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        fetchTags();
                    } else {
                        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error deleting status:', error);
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
                });
            }
        }

        // Fetch data when the page loads
        window.onload = function() {
            fetchUsers();
            fetchTags();
        };
    </script>
</body>
</html>
